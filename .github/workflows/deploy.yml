name: Docker Push to ECR and Scan

on:
  push:
    branches:
      - main  # Cambia a la rama donde quieres activar el workflow

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-1  # Asegúrate de definir la región correcta aquí
      ECR_REPOSITORY: my-repo  # Cambia al nombre de tu repositorio
      IMAGE_TAG: latest
      AWS_ACCOUNT_ID: 325436486329

    steps:
      - name: Check out code
        uses: actions/checkout@v3


      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build, tag, and push image to ECR
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Verify working directory
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of docker-images:"
          ls -la

      - name: Save Docker image as tar file
        working-directory: ./
        run: |
          mkdir -p docker-images
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Using IMAGE_URI=$IMAGE_URI"
          docker save -o docker-images/image.tar "$IMAGE_URI"
          ls -la docker-images

      - name: Verify image.tar existence
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of docker-images:"
          ls -la docker-images
          echo "Contents of /github/workspace:"
          ls -la /github/workspace

      - name: Verify directorio docker antes del escaneo
        run: |
          echo "Verificando docker directorio"
          ls -la docker-images

  scan-image:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Vision One Container Security Scan Action
        uses: trendmicro/tmas-scan-action@main
        with:
          TMAS_API_KEY: ${{ secrets.TMAS_API_KEY }}
          REGION: eu-central-1
          VULNERABILITY_SCAN: true
          SBOM: true  # Habilitar la creación de SBOM
          MALWARE_SCAN: true
          SECRETS_SCAN: true
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          LOCAL_IMAGE_TARBALL: docker-images/image.tar  # Ruta correcta para el archivo tar
          MAX_TOTAL: 5
          MAX_CRITICAL: 1
          MAX_HIGH: 1
          MAX_MEDIUM: 1
          MAX_LOW: 0
          MAX_NEGLIGIBLE: 0
          MAX_UNKNOWN: 0
          SCAN_RESULT_ARTIFACT: result.json

  deploy-to-k8s:
    needs: scan-image
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s-deployment.yml

