name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        env:
          ECR_REPOSITORY: my-repo
          IMAGE_TAG: latest
        run: |
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"

  scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Vision One Container Security Scan Action
        uses: trendmicro/tmas-scan-action@version*
        with:
          TMAS_API_KEY: ${{ secrets.TMAS_API_KEY }}
          REGION: us-east-1
          VULNERABILITY_SCAN: true
          SBOM: true
          MALWARE_SCAN: true
          SECRETS_SCAN: true
          IMAGE: ${{ steps.ecr-login.outputs.registry }}/my-repo:latest
          LOCAL_IMAGE_TARBALL: image.tar
          MAX_TOTAL: 5
          MAX_CRITICAL: 1
          MAX_HIGH: 1
          MAX_MEDIUM: 1
          MAX_LOW: 0
          MAX_NEGLIGIBLE: 0
          MAX_UNKNOWN: 0
          SCAN_RESULT_ARTIFACT: result.json

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: scan
    if: success() # Solo si el escaneo es exitoso

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Deploy to Kubernetes
        run: |
          kubectl run my-app --image=${{ steps.ecr-login.outputs.registry }}/my-repo:latest --restart=Always

